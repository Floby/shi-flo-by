{
  "name": "mux-demux",
  "version": "2.3.0",
  "description": "multiplex-demultiplex object streams across _any_ text stream.",
  "homepage": "http://github.com/dominictarr/mux-demux",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/mux-demux.git"
  },
  "dependencies": {
    "event-stream": "~2.2",
    "xtend": "~1.0.3"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "devDependencies": {
    "assertions": "2.3",
    "tap": "~0.3.0"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "dominictarr.com"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# MuxDemux\n\nmultiplex-demultiplex object streams across _any_ text stream.\n\n``` js\nvar MuxDemux = require('..')\nvar net = require('net')\n\nvar mdm1 = MuxDemux()\nvar mdm2 = MuxDemux()\n\nmdm2.on('connection', function (stream) {\n  stream.on('data', function (date) {\n    console.log(date)\n  })\n})\n\nnet.createServer(function (con) {\n  con.pipe(mdm2).pipe(con)\n}).listen(8642, function () {\n  var con = net.connect(8642)\n  con.pipe(mdm1).pipe(con)\n  var ds = mdm1.createWriteStream('times')\n\n  setInterval(function () {\n    ds.write(new Date().toString())\n  }, 1e3)\n})\n\n```\n\n#API\n\nthe API [browser-stream](http://github.com/dominictarr/browser-stream#api)\n\n``` js\n\nvar MuxDemux = require('mux-demux')\nvar client = MuxDemux()\nvar server = MuxDemux()\n\nclient.pipe(server).pipe(client)\n\nserver.on('connection', function (stream) {\n  // inspect stream.meta to decide what this stream is.\n})\n\nclient.createWriteStream(meta)\nclient.createReadStream(meta)\nclient.createStream(meta)\n\n```\nthere is actually no distinction between clients and servers.\nif both sides are listening `on('connection',...)` then both sides may call `create{Write,Read,}Stream(meta)` and initiate new streams.\n\n### MuxDemux(options)\n\nCreates a MuxDemux stream. Optionally pass in an options hash \n\n    {\n        error: Boolean,\n        wrapper: function (stream) {...}\n    }\n\nIf the error option is set to false then MuxDemux won't emit errors on the streams on unexpected disconnects and instead just end those streams\n\n`wrapper` be used to change the serialization format used by `mux-demux`,\nby default, line seperated json is used. see examples [below](#wrapper_examples)\nboth mux-demux end points must use the same wrapper.\n\n### createReadStream (meta)\n\nopen a `ReadableStream` from the other side.\nreturns a `ReadableStream`.\nthe other side of connection will emit a writable stream that is connected to this stream.\n\n### createWriteStream (meta)\n\nopen a `WritableStream` to the other side.\nreturns a `WritableStream`, the other side will emit a `ReadableStream` connected to this stream.\n\n### createStream (meta)\n\nopen a `Stream` to the other side which is both readable and writable.\nreturns a `Stream`, the other side will emit a `Stream` connected to this stream.\n\n> note to self, references to a class (`Stream`) should be capitalized, and in backticks.\n> references to an instance should be lowercase, and not in backticks unless refuring to\n> a specific variable in a code example.\n\n### Wrapper Examples\n\nA stream of plain old js objects.\n\n``` js\nnew MuxDemux(function (stream) { return stream })\n```\n\nA stream of msgpack.\n\n``` js\nvar es = require('event-stream')\nvar ms = require('msgpack-stream')\n\nnew MuxDemux(function (stream) { \n  return es.pipeline(ms.createDecodeStream(), stream, ms.createEncodeStream()) \n})\n\n```\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/dominictarr/mux-demux/issues"
  },
  "_id": "mux-demux@2.3.0",
  "dist": {
    "shasum": "5079b009d37ddb3499fa2dddb6c9be49d22d9aaa"
  },
  "_resolved": "git://github.com/Raynos/mux-demux.git#5ad47cac978f1879972dcada93bde8bec26fda64",
  "_from": "mux-demux@git://github.com/Raynos/mux-demux.git#error-messages"
}
